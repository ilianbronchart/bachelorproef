<div id="class-management-{{ sim_room_id }}"
     class="class-management"
     {% if sim_room_id %}data-sim-room-id="{{ sim_room_id }}"{% endif %}>
  <form class="mb-3"
        hx-post="/simrooms/{{ sim_room_id }}/classes/add"
        hx-target="#class-management-{{ sim_room_id }}"
        hx-target-4xx="#error"
        hx-target-5xx="#error"
        hx-swap="outerHTML"
        hx-on::before-request="clearError()">
    <div class="mb-3">
      <label for="class-name" class="form-label">New Object Name:</label>
      <div class="d-flex gap-2 align-items-stretch">
        <div class="class-color position-relative">
          <input type="text"
                 id="colorpicker-input"
                 class="color-input"
                 name="color"
                 value="#198754"
                 data-color="#198754">
          <div id="colorpicker-preview"
               class="color-preview flex-shrink-0 form-color-preview default-preview"></div>
        </div>
        <input type="text"
               class="form-control"
               id="class-name"
               name="class_name"
               placeholder="Enter object name"
               required>
      </div>
    </div>
    <button type="submit" class="btn btn-success">Add Object</button>
  </form>
  <ul class="list-group class-list user-select-none">
    {% if classes|length == 0 %}<li class="list-group-item text-muted text-center">No objects defined</li>{% endif %}
    {% for class in classes %}
      <li class="list-group-item d-flex justify-content-between align-items-center transition-bg {% if class.active %}active{% endif %}"
          onclick="window.classManager.setActiveClass(this, '{{ class.label }}')"
          data-class-id="{{ class.id }}">
        <div class="d-flex align-items-center gap-2">
          <div class="class-color position-relative">
            <input type="text"
                   class="color-input"
                   value="{{ class.color }}"
                   name="color"
                   data-color="{{ class.color }}"
                   onclick="event.stopPropagation()">
            <div class="color-preview" style="background-color: {{ class.color }}"></div>
          </div>
          <span class="class-label">{{ class.label }}</span>
        </div>
        <button class="btn btn-sm btn-danger"
                hx-confirm="Are you sure? This will delete all annotations linked to this class."
                hx-delete="/simrooms/{{ sim_room_id }}/classes/{{ class.id }}"
                hx-target="#class-management-{{ sim_room_id }}"
                hx-target-400="#error"
                hx-target-404="#error"
                hx-target-500="#error"
                hx-swap="outerHTML"
                hx-on::before-request="clearError()">
          <i class="bi bi-trash"></i>
        </button>
      </li>
    {% endfor %}
  </ul>
</div>
<style>
  .class-list .list-group-item {
    cursor: pointer;
    border-left: 3px solid transparent;
    transition: all 0.2s ease-in-out;
    background-color: transparent;
  }
  .class-list .list-group-item:hover {
    background-color: rgba(0,0,0,.055);
    border-left-color: var(--bs-primary);
  }
  .class-list .list-group-item.active {
    color: inherit;
    background-color: rgba(0,0,0,.075);
    border-color: rgba(0,0,0,.125);
    border-left-color: var(--bs-primary);
    transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
  }
  .class-list .list-group-item.active:hover {
    background-color: rgba(0,0,0,.1);
    border-left-color: var(--bs-primary);
  }
  .class-list .list-group-item .class-label {
    flex-grow: 1;
  }
  .color-preview {
    width: 38px;
    height: 38px;
    border-radius: 4px;
    border: 1px solid rgba(0,0,0,.2);
    cursor: pointer;
  }
  .list-group-item .color-preview {
    width: 24px;
    height: 24px;
  }
  /* Instead of hiding the input by zero width and visibility, we position it off-screen */
  .color-input {
    position: absolute;
    left: -9999px;
  }
  .class-color {
    display: flex;
    align-items: center;
  }
  .form-color-preview {
    height: calc(1.5em + 0.75rem + 2px); /* Match Bootstrap form-control height */
  }
  /* Bootstrap Colorpicker customizations */
  .colorpicker-bs-popover {
    z-index: 1060;
  }
  .default-preview {
    background-color: #198754;
  }
</style>
<!-- Pickr color picker dependencies -->
<link rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/themes/classic.min.css">
<script src="https://cdn.jsdelivr.net/npm/@simonwep/pickr/dist/pickr.es5.min.js"></script>
<script>
  if (window.__classListScriptInitialized) {
    // Reinitialize listeners on subsequent swaps.
    initColorPickerListeners();
  } else {
    window.__classListScriptInitialized = true;
    // Global variables and functions
    let globalPickr = null;
    let currentInput = null;
    // Updated Pickr configuration
    const pickrConfig = {
      theme: 'classic',
      useAsButton: true,
      closeOnSave: true, // Change this to true
      comparison: false,
      components: {
        preview: true,
        opacity: false,
        hue: true,
        interaction: {
          input: true,
          save: true
        }
      }
    };

    // Initialize the global Pickr if it doesn't already exist.
    function initGlobalPickr() {
      if (globalPickr) {
        return;
      }
      
      globalPickr = Pickr.create({
        el: document.body,
        ...pickrConfig,
        default: '#198754'
      });

      globalPickr.hide();

      globalPickr.on('save', (color) => {
        if (!currentInput) return;
        
        const newColor = color.toHEXA().toString();
        currentInput.value = newColor;
        const preview = currentInput.closest('.class-color').querySelector('.color-preview');
        if (preview) {
          preview.style.backgroundColor = newColor;
        }

        // If this is an existing class, trigger the fetch call
        if (currentInput.id !== 'colorpicker-input') {
          const li = currentInput.closest('li');
          const classManagement = currentInput.closest('.class-management');
          const simRoomId = classManagement.dataset.simRoomId;
          if (!simRoomId) {
            console.error('No sim_room_id found');
            const errorEl = document.getElementById('error');
            errorEl.textContent = 'Configuration error: No simulation room ID found';
            errorEl.style.display = 'block';
            return;
          }
          
          const classId = li.dataset.classId;
          const endpoint = `/simrooms/${simRoomId}/classes/${classId}/color`;
          const formData = new FormData();
          formData.append('color', newColor);
          
          preview.style.opacity = '0.5';
          
          fetch(endpoint, {
            method: 'PUT',
            body: formData,
          })
          .then(response => {
            preview.style.opacity = '1';
            if (!response.ok) {
              return response.text().then(text => {
                throw new Error(text);
              });
            }
            return response.json();
          })
          .then(updatedClass => {
            if (updatedClass) {
              currentInput.value = updatedClass.color;
              preview.style.backgroundColor = updatedClass.color;
              window.classManager.updateClass(parseInt(classId), updatedClass);
            }
          })
          .catch(error => {
            console.error('Error:', error);
            preview.style.backgroundColor = currentInput.value;
            const errorEl = document.getElementById('error');
            errorEl.textContent = error.message || 'Failed to update color';
            errorEl.style.display = 'block';
            setTimeout(() => {
              errorEl.textContent = '';
              errorEl.style.display = 'none';
            }, 5000);
          });
        }
      });

      // Add a handler for the hide event to cleanup
      globalPickr.on('hide', () => {
        currentInput = null;
      });
    }

    // Attach the global picker to a given input.
    function attachPickerToInput(inputElement) {
      currentInput = inputElement;
      // Update the picker's color.
      globalPickr.setColor(inputElement.value);
      // Optionally, reposition the picker's container near the clicked preview.
      // Here we simply show it. (Advanced: adjust globalPickr.getRoot().style.top/left using inputElement.getBoundingClientRect())
      globalPickr.show();
    }

    // Set up event listeners on the color preview elements.
    function initColorPickerListeners() {
      // For the new class form.
      const newClassPreview = document.getElementById('colorpicker-preview');
      const newClassInput = document.getElementById('colorpicker-input');
      if (newClassPreview && newClassInput) {
        newClassPreview.addEventListener('click', (e) => {
          e.stopPropagation();
          attachPickerToInput(newClassInput);
        });
      }

      // For each existing class preview.
      document.querySelectorAll('.class-list .color-preview').forEach(preview => {
        // Skip the new class preview (if it shares an id).
        if (preview.id === 'colorpicker-preview') return;
        const input = preview.closest('.class-color').querySelector('.color-input');
        if (!input) return;
        preview.addEventListener('click', (e) => {
          e.stopPropagation();
          attachPickerToInput(input);
        });
      });
    }

    // Hide the picker when clicking outside.
    document.addEventListener('click', (e) => {
      // Check if click is inside the Pickr app, color preview, or save button
      const isPickrClick = e.target.closest('.pcr-app') || 
                          e.target.closest('.color-preview') ||
                          e.target.closest('.pcr-save');
      
      if (!isPickrClick && globalPickr) {
        globalPickr.hide();
      }
    });

    // Stop click propagation from Pickr elements
    document.addEventListener('click', (e) => {
      if (e.target.closest('.pcr-app')) {
        e.stopPropagation();
      }
    }, true);  // Using capture phase to stop propagation early

    // Initialize the global picker and listeners on DOMContentLoaded.
    document.addEventListener('DOMContentLoaded', () => {
      initGlobalPickr();
      initColorPickerListeners();
    });

    // Reinitialize the listeners after an htmx swap (if new color previews are added)
    document.addEventListener('htmx:afterSettle', initColorPickerListeners);

    // Fallback definition for window.classManager if not already defined
    if (!window.classManager) {
      window.classManager = {
        setActiveClass: function(element, label) {
          console.log('Fallback: setActiveClass called', element, label);
        },
        updateClass: function(classId, updatedClass) {
          console.log('Fallback: updateClass called', classId, updatedClass);
        }
      };
    }
  }
</script>
