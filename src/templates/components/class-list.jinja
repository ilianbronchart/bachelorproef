<div id="class-list"
     class="class-management d-flex flex-column"
     {% if selected_sim_room.id %}data-sim-room-id="{{ selected_sim_room.id }}"{% endif %}>
  <form hx-post="/simrooms/{{ selected_sim_room.id }}/classes/add"
        hx-target="#class-list"
        hx-target-4xx="#error-message"
        hx-target-5xx="#error-message"
        hx-on:click="clearError()"
        autocomplete="off">
    <div class="mb-3">
      <label for="class-name" class="form-label user-select-none">New Class Name:</label>
      <div class="d-flex gap-1">
        <input type="text"
               class="form-control"
               id="class-name"
               name="class_name"
               placeholder="Enter class name"
               required>
        <button type="submit" class="btn btn-success ms-2 btn-plus">
          <svg xmlns="http://www.w3.org/2000/svg"
               width="24"
               height="24"
               fill="currentColor"
               class="bi bi-plus-lg"
               viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2" />
          </svg>
        </button>
      </div>
    </div>
  </form>
  <ul class="list-group class-list user-select-none">
    {% if classes|length == 0 %}<li class="list-group-item text-muted text-center">No classes defined</li>{% endif %}
    {% for class in classes %}
      <li class=" list-group-item d-flex justify-content-between align-items-center transition-bg {% if class.active %}active{% endif %}"
          onclick="window.classManager.setActiveClass(this, '{{ class.id }}')"
          data-class-id="{{ class.id }}">
        <div class="d-flex align-items-center gap-2">
          <div class="color-preview" style="background-color: {{ class.color }}"></div>
          <span class="class-name">{{ class.class_name }}</span>
        </div>
        <button class="btn btn-sm btn-danger"
                hx-confirm="Are you sure? This will delete all annotations linked to this class."
                hx-delete="/simrooms/{{ selected_sim_room.id }}/classes/{{ class.id }}"
                hx-target="#class-list"
                hx-target-400="#error-message"
                hx-target-404="#error-message"
                hx-target-500="#error-message"
                hx-on::before-request="window.classManager.classDeleted(event, {{ class.id }})">
          <i class="bi bi-trash-fill"></i>
        </button>
      </li>
    {% endfor %}
  </ul>
</div>
<script>
// Global class manager to handle class state
window.classManager = {
    classes: [],
    activeClass: null,

    // Initialize with a list of classes
    initialize() {
        this.classes = {{ classes|tojson }};
        
        let storedActiveClass = window.localStorage.getItem("activeClass");
        if (storedActiveClass) {
          storedActiveClass = JSON.parse(storedActiveClass);
        }

        if (storedActiveClass) {
            activeClass = this.classes.find(
              c => parseInt(c.id) === parseInt(storedActiveClass.id)
            ) || null;

            if (activeClass) {
              this.setActiveClass(
                document.querySelector(`.class-list .list-group-item[data-class-id="${activeClass.id}"]`),
                activeClass.id
              );
            }
        }
    },

    // Set the active class when a class is selected
    setActiveClass(element, class_id) {
        if (window.location.href.includes('simrooms')) return

        // Remove active class from all elements
        document.querySelectorAll('.class-list .list-group-item').forEach(item => {
            item.classList.remove('active');
        });

        // Add active class to selected element
        if (element) {
            element.classList.add('active');
        }

        this.activeClass = this.classes.find(
          c => parseInt(c.id) === parseInt(class_id)
        ) || null;

        classChanged = new CustomEvent('active-class-changed', { detail: { classId: this.activeClass.id } });
        window.dispatchEvent(classChanged);

        window.localStorage.setItem("activeClass", JSON.stringify(this.activeClass));
    },

    classDeleted(event, classId) {
      event.detail.successful = true; // TODO: Currently after-request is broken so we use before-request
      // See: https://github.com/bigskysoftware/htmx/issues/3177
      if (event.detail.successful) {
        classDeleted = new CustomEvent('class-deleted', { detail: { classId } });
        window.dispatchEvent(classDeleted);
      }
    },
};

window.classManager.initialize();
</script>
<style>
  .list-group {
    margin-top: 1.5rem;
  }
  .class-list .list-group-item {
    cursor: pointer;
    transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
    background-color: transparent;
    min-height: 3rem; /* Ensure consistent height */
    font-weight: 400; /* Fix font weight for consistency */
  }
  .class-list .list-group-item:hover {
    background-color: rgba(0,0,0,.055);
    border-left: 3px solid var(--bs-primary);
  }
  .class-list .list-group-item.active {
    color: inherit;
    background-color: rgba(0,0,0,.075);
    border-color: rgba(0,0,0,.125);
    border-left: 3px solid var(--bs-primary);
    font-weight: 400; /* Maintain consistent font weight */
  }
  .class-list .list-group-item.active:hover {
    background-color: rgba(0,0,0,.1);
    border-left: 3px solid var(--bs-primary);
  }
  .class-list .list-group-item .class-name {
    flex-grow: 1;
  }
  .color-preview {
    width: 24px;
    height: 24px;
    border-radius: 4px;
    border: 1px solid rgba(0,0,0,.2);
  }
  /* Make list take full height */
  .class-management {
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  .class-list {
    flex-grow: 1;
    overflow-y: auto;
  }
</style>
