<div id="labeling-timeline"
     class="d-flex align-items-center gap-3 mb-3 h-auto"
     hx-on::after-settle="initialize(event)"
     hx-get="/labeling/timeline?polling=True"
     hx-trigger="every 1s"
     hx-select="#script-container"
     hx-target="#script-container"
     hx-swap="outerHTML">
  <span id="current-frame-idx"></span>
  <button id="btn-track"
          class="btn btn-primary btn-square"
          hx-post="/labeling/tracking"
          hx-select="#script-container"
          hx-target="#script-container"
          hx-swap="outerHTML"
          onclick="updateTrackingButton(true)"
          hx-on::after-request="afterTrackingRequest(event)">
    <svg xmlns="http://www.w3.org/2000/svg"
         height="24px"
         viewBox="0 -960 960 960"
         width="24px"
         fill="#e3e3e3"
         id="track-icon">
      <path d="M440-40v-80q-125-14-214.5-103.5T122-438H42v-80h80q14-125 103.5-214.5T440-836v-80h80v80q125 14 214.5 103.5T838-518h80v80h-80q-14 125-103.5 214.5T520-120v80h-80Zm40-158q116 0 198-82t82-198q0-116-82-198t-198-82q-116 0-198 82t-82 198q0 116 82 198t198 82Z" />
    </svg>
    <div id="track-spinner"
         class="spinner spinner-border spinner-border-sm"
         role="status"></div>
  </button>
  <div id="timeline"
       class="position-relative w-100 rounded"
       hx-get="/labeling/timeline?polling=False"
       hx-select="#script-container"
       hx-target="#script-container"
       hx-swap="outerHTML"
       hx-trigger="classes-loaded from:window, labeling-seek-frame-index from:window, click"
       hx-on::config-request="configSeekRequest(event)">
    <div id="timeline-position" class="rounded"></div>
    <div id="tracking-progress" class="position-absolute h-100 rounded"></div>
  </div>
  <div id="script-container" hx-on::after-swap="initialize(event)">
    <script>
frameCount = parseInt({{ frame_count }});
currentFrameIdx = parseInt({{ current_frame_idx }});
updateCanvas = "{{ update_canvas }}" === "True";
isTracking = "{{ is_tracking }}" === "True";
trackingProgress = parseFloat("{{ tracking_progress }}");
tracks = {{ tracks|tojson }};
trackColor = "{{ selected_class_color }}";

function configSeekRequest(event) {
  const triggeringEvent = event.detail.triggeringEvent;
  switch (triggeringEvent.type) {
    case "click":
      const timeline = document.getElementById("timeline");
      const rect = timeline.getBoundingClientRect();
      const clickX = triggeringEvent.clientX - rect.left;
      const percent = clickX / timeline.offsetWidth;
      event.detail.parameters.frame_idx = parseInt(percent * frameCount);
      break;
    case "labeling-seek-frame-index":
      event.detail.parameters.frame_idx = triggeringEvent.detail.frameIndex;
      break;
  }
}

function updateProgress() {
  const progress = document.getElementById("tracking-progress"); 

  if (isTracking) {
    progress.style.display = "block";
    progress.style.width = `${trackingProgress * 100}%`;
    progress.style.backgroundColor = "#0d6efd";
  } else {
    progress.style.display = "none";
  }
}

function setTimelinePosition(event) {
  const frameIdxElement = document.getElementById("current-frame-idx");
  frameIdxElement.textContent = `${currentFrameIdx}`;

  const position = document.getElementById("timeline-position");
  position.style.left = `${currentFrameIdx / frameCount * 100}%`;
  position.style.transform = 'translateX(-50%)';
}

function updateTrackingButton(tracking) {
  trackBtn = document.getElementById("btn-track");
  trackIcon = document.getElementById("track-icon");
  trackSpinner = document.getElementById("track-spinner");
  trackBtn.disabled = tracking;
  trackIcon.style.display = tracking ? "none" : "block";
  trackSpinner.style.display = tracking ? "block" : "none";
}

function renderTracks() {
  // remove all existing tracks:
  const existingTracks = document.querySelectorAll(".track");
  existingTracks.forEach(track => track.remove());

  const timeline = document.getElementById("timeline");
  for (const track of tracks) {
    const trackElement = document.createElement("div");
    trackElement.className = "track rounded pe-none";
    trackElement.style.left = `${track[0] / frameCount * 100}%`;
    trackElement.style.width = `${(track[1] - track[0]) / frameCount * 100}%`;
    trackElement.style.backgroundColor = trackColor;
    timeline.appendChild(trackElement);
  }
}

function afterTrackingRequest(event) {
  if (event.detail.xhr.status !== 200) {
    alert(event.detail.xhr.response)
  }
}

function initialize(event) {
  if (updateCanvas) {
    window.dispatchEvent(new CustomEvent('labeling-seek', { detail: { frameIndex: currentFrameIdx } }));
  }
  setTimelinePosition(event);
  updateProgress();
  updateTrackingButton(isTracking);
  renderTracks();
}
    </script>
  </div>
  <style>
#btn-track {
  width: 40px;
  height: 40px;
}

#timeline {
  height: 30px;
  background-color: rgb(231, 231, 231);
  cursor: pointer;
}

#timeline-position {
  position: absolute;
  top: -3px;
  left: 0;
  width: 0;
  height: 36px;
  width: 8px;
  background-color: white;
  z-index: 10;
  -webkit-box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.5);
  -moz-box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.5);
  box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.5);
  outline: 3px solid #000000; 
}

.track {
  position: absolute;
  top: -3px;
  height: 36px;
  -webkit-box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.5);
  -moz-box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.5);
  box-shadow: 0px 0px 3px 0px rgba(0,0,0,0.5);
}

#tracking-progress {
  background-color: #5f9fff !important;
}
  </style>
</div>
