<canvas id="labeling-canvas"
        width="1920"
        height="1080"
        class="mb-3"
        hx-on:mousedown="window.labelingCanvas.click(event)"
        hx-on:mousemove="window.labelingCanvas.mouseMove(event)"></canvas>
<script>
window.labelingCanvas = {
  canvas: null,
  ctx: null,
  frameImage: null,
  pointLabels: [],
  selectedClassId: null,

  init() {
    // Get the canvas and context.
    this.canvas = document.getElementById('labeling-canvas');
    this.ctx = this.canvas.getContext('2d');
    this.fetchCurrentFrame();

    window.addEventListener('labeling-seek', this.fetchCurrentFrame.bind(this));
    window.addEventListener('annotation-deleted', this.fetchCurrentFrame.bind(this));
    window.addEventListener('classes-loaded', event => {
      this.selectedClassId = event.detail.selectedClassId;
    })
    window.addEventListener('render-canvas', this.fetchCurrentFrame.bind(this));
  },

  getMousePos(event) {
    const rect = this.canvas.getBoundingClientRect();
    const scaleX = this.canvas.width / rect.width;
    const scaleY = this.canvas.height / rect.height;
    const mouseX = (event.clientX - rect.left) * scaleX;
    const mouseY = (event.clientY - rect.top) * scaleY;
    return { x: mouseX, y: mouseY };
  },

  getHoveredPoint() {
    for (let pt of this.pointLabels) {
      const mousePos = this.getMousePos(event);
      const dx = pt.x - mousePos.x;
      const dy = pt.y - mousePos.y;
      if (Math.sqrt(dx * dx + dy * dy) <= 10) {
        return pt
      }
    }
    return null;
  },

  async click(event) {
    event.preventDefault(); // Prevent default behavior
    
    // Get the mouse position
    const mousePos = this.getMousePos(event);
    const hoveredPoint = this.getHoveredPoint();
    const point = hoveredPoint ? hoveredPoint : mousePos;
    const deletePoint = Boolean(hoveredPoint);
    
    // Set label based on mouse button: left = positive (1), right = negative (0)
    const label = event.button === 0 ? 1 : (event.button === 2 ? 0 : null);
    if (label === null) return; // Ignore other mouse buttons

    try {      
      const annotationData = {
        point: [Math.round(point.x), Math.round(point.y)],
        label: label,
        deletePoint: deletePoint
      };
      
      // Post the annotation
      const newFrameBlob = await window.API.postAnnotation(annotationData);
      await this.fetchPointLabels();
      this.setImage(newFrameBlob);

      annotationPostedEvent = new CustomEvent('annotation-posted');
      window.dispatchEvent(annotationPostedEvent);
    } catch (error) {
      console.error("Error posting annotation:", error);
    }
  },

  mouseMove(event) {
    const hoveredPoint = this.getHoveredPoint();
    this.renderCanvas(hoveredPoint);
  },

  setImage(blob) {
    const objectURL = URL.createObjectURL(blob);
    const img = new Image();
    img.onload = () => {
      this.frameImage = img;
      this.renderCanvas();
      URL.revokeObjectURL(objectURL);
    };
    img.src = objectURL;
  },

  async fetchCurrentFrame() {
    try {
      const blob = await window.API.fetchCurrentFrame();
      await this.fetchPointLabels();
      this.setImage(blob);
    } catch (error) {
      console.error("Error seeking frame:", error);
    }      
  },

  async fetchPointLabels() {
    try {
      // Use the API utility to fetch point labels
      this.pointLabels = await window.API.getPointLabels();
    } catch (error) {
      this.pointLabels = [];
      console.error("Error fetching point labels:", error);
    }
  },

  renderCanvas(hoverPoint) {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.drawImage(this.frameImage, 0, 0, this.canvas.width, this.canvas.height);
    
    // Draw point labels with the currently selected class id
    if (this.selectedClassId && this.pointLabels) {
      const labels = this.pointLabels;
      labels.forEach(pt => {
        if (parseInt(pt.class_id) === this.selectedClassId) {
          this.ctx.beginPath();
          this.ctx.arc(pt.x, pt.y, 7, 0, 2 * Math.PI);
          // false label = negative point = red, true label = positive point = green
          this.ctx.fillStyle = pt.label ? '#74eb34' : '#eb4034';
          this.ctx.fill();
        }
      });
    }

    // Draw hover point if it exists
    if (hoverPoint) {
      this.ctx.beginPath();
      this.ctx.arc(hoverPoint.x, hoverPoint.y, 10, 0, 2 * Math.PI);
      this.ctx.strokeStyle = 'yellow';
      this.ctx.lineWidth = 3;
      this.ctx.stroke();
    }
  }
};

window.labelingCanvas.init();

// Add right-click context menu prevention
document.getElementById('labeling-canvas').addEventListener('contextmenu', function(e) {
  e.preventDefault();
});
</script>
<style>
#labeling-canvas {
  width: 100%;
  border: 1px solid #ddd;
  border-radius: 0.375rem;
}
</style>
